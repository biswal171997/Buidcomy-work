@*//Auther By AMIT SINHA
//MODIFIED ON 10 FEB 2025 test*@

@Html.AntiForgeryToken()
<div class="page-body">
    <!-- breadcrumb section -->
    <div class="d-flex align-items-center justify-content-between mb-4 flex-wrap gap-3">
        <nav aria-label="breadcrumb">
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="#!" title="Home"><i class="bi bi-house"></i></a></li>
                <li class="breadcrumb-item"><a href="#" title="Master"> Master   </a></li>
                <li class="breadcrumb-item active" title="Project Type" aria-current="page"> Client  </li>
            </ul>
        </nav>
        <div class="col-right">
            <button type="button" class="btn btn-primary btn-sm me-3" title="Add" onclick="AddClient()">
                <i class="bi bi-plus-circle me-1"></i> Add
            </button>
            <button type="button" class="btn btn-outline-danger btn-sm" title="Delete" data-bs-toggle="tooltip" onclick="DeleteClient()"> <i class="bi bi-trash"></i> </button>
            @* <button type="button" class="btn btn-outline-secondary btn-sm" title="Excel" data-bs-toggle="tooltip">
            <i class="buidcoicon-excel"></i>
        </button>
        <button type="button" class="btn btn-outline-secondary btn-sm" title="Print Preview"
                data-bs-toggle="tooltip">
            <i class="bi bi-printer"></i>
        </button> *@
        </div>
    </div>
    <!-- breadcrumb section -->


    <!-- inner body section -->
    <div class="body__content">
        <div class="body__bg">
            <div class="table__fixed">
                <div class="table-responsive border">
                    <table id="tbl" class="table table-striped">
                        <thead>
                            <tr>
                                <th style="width: 5%">
                                    <div class="form-check">
                                        <input class="form-check-input checkbox" type="checkbox" value="" id="flexCheckDefault_">
                                    </div>
                                </th>
                                <th style="display:none"></th>
                                <th style="width: 5%"> Sl# </th>
                                <th style="width: 30%"> Client Name </th>
                                <th style="width: 60%"> Description </th>
                                <th style ="width: 5%"> Edit </th>
                            </tr>
                        </thead>
                        <tbody id="tblbody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <!-- add project type Modal -->
    <div class="modal fade right custom-view-modal-medium" id="addProposal" tabindex="-1">
        <div class="modal-dialog modal-lg custom-modal modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"> Add Client </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="form">
                        <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">

                            <div class="form-group">
                                <div class="row">
                                    <div class="col-xxl-4 col-xl-4 col-lg-4 col-md-4 col-12">
                                        <label class="control-label" for="txtProjectType">Client Name<span class="text-danger">*</span></label>
                                    </div>
                                    <div class="col-xxl-8 col-xl-8 col-lg-8 col-md-8 col-12">
                                        <input type="text" id="ClientName" name="ClientName" onkeypress="AllowOnlyChar(event)" onchange="RemoveWhiteSpace(this);" maxlength="50"  class="form-control" autocomplete="off">
                                            <input id="hdnClientId" type="hidden" />
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="row">
                                    <div class="col-xxl-4 col-xl-4 col-lg-4 col-md-4 col-12">
                                        <label class="control-label" for="txtProjecttype"> Description  <span class="text-danger">*</span></label>
                                    </div>
                                    <div class="col-xxl-8 col-xl-8 col-lg-8 col-md-8 col-12">
                                        <textarea class="form-control LengthRemarks" id="clientDesc" rows="4" cols="4" name="clientDesc" onkeypress="AllowAlphaNumeric(event)" onchange="RemoveWhiteSpace(this);" targetid="MaxSize" maxlength="200"></textarea>
                                        <small class="text-danger d-block text-end mt-2">
                                            Maximum <span id="txtchar"><strong id="MaxSize">200</strong></span> characters allowed
                                        </small>
                                    </div>
                                </div>
                            </div>

                    </form>
                </div>
                <div class="modal-footer lg__btn border-0 justify-content-start">
                    <button type="button" class="btn btn-light-danger me-3" onclick="reset()" id="DynamicButton">Reset</button>
                    <button type="button" class="btn btn-primary" id="subaddData" onclick="SaveClient()"> Submit </button>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        $('#splayoutheader').text('Client');
          $('.form-control').bind('copy paste cut', function (e) {
            e.preventDefault();


        });
        GetClient();
       /* GetprojectHead();*/
        function getUrlVars() {
            var vars = {};
            var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
                vars[key] = decodeURIComponent(value);
            });
            return vars;
        }
        var id = getUrlVars()["strid"];
        if (id != undefined || id != null) {
            EditClient(decryptData(id));
        }
        debugger
        $("#form").validate({

            rules: {
                //SchemeName: {
                //    required: true
                //},
                ClientName: {
                    required: true
                },

                clientDesc: {
                    required: true
                },
            },
            messages: {
                //SchemeName: {
                //    required: "Please Select Project Head"
                //},

                ClientName: {
                    required: "Please enter Client Name"
                },
                clientDesc: {
                    required: "Please enter Description"
                },

            },

            errorPlacement: function (error, element) {
                error.css("color", "red");
                error.insertAfter(element);
            },


            highlight: function (element) {
                $(element).removeClass("is-valid")
                $(element).parent().addClass('error')
                $(element).addClass("is-invalid")
            },
            unhighlight: function (element) {
                $(element).parent().removeClass('error')
                $(element).removeClass("is-invalid");
                $(element).addClass("is-valid")
            }
        });
    });

    $(".checkbox").change(function () {
        var isChecked = $(this).prop("checked");
        $(".checkbox").prop("checked", $(this).prop("checked"));
    });

    $('#tblbody').on('change', '.checkbox', function () {
        const totalCheckboxes = $('.checkbox:visible:not(#flexCheckDefault_)').length;
        const checkedCheckboxes = $('.checkbox:checked:visible:not(#flexCheckDefault_)').length;
        // Update the header checkbox based on selection
        $('#flexCheckDefault_').prop('checked', totalCheckboxes === checkedCheckboxes);
    });





    //------Description Count Start---
    $(document).ready(function () {
        // Function to update the character count
        function updateCharCount(textArea) {
            var maxLength = $(textArea).attr("maxlength"); // Get maxlength from textarea
            var currentLength = $(textArea).val().length; // Current text length
            var remaining = maxLength - currentLength; // Remaining characters

            var spanId = $(textArea).attr("targetid"); // Get target span ID
            $('#' + spanId).text(remaining); // Update the count in the span

            if (remaining < 0) {
                swal("","You have reached your maximum limit of characters allowed.","error");
                $(textArea).val($(textArea).val().substring(0, maxLength)); // Trim input
                $('#' + spanId).text(0); // Set to 0 when limit is exceeded
            }
        }

        // Keyup event to update character count in real-time
        $(document).on('keyup', '.LengthRemarks', function () {
            updateCharCount(this);
        });

        // Blur event to validate character count when user leaves the textarea
        $(document).on('blur', '.LengthRemarks', function () {
            updateCharCount(this);
        });
    });
    ///////-----Description Count End---

    function lettersDigitValidate(event) {
         var keyCode = event.which || event.keyCode;

         // Allowed key codes: a-z, A-Z, 1-9, ., , , :, -, (, ), \, /
         var allowedKeyCodes = [...Array(10).keys()].map(i => i + 48) // 0-9
             .concat([...Array(26).keys()].map(i => i + 65)) // A-Z
             .concat([...Array(26).keys()].map(i => i + 97)) // a-z
             .concat([46, 44, 58, 45, 40, 41, 92, 47, 32]); // ., ,, :, -, (, ), \, / space

         // Check if the pressed key is allowed
         if (allowedKeyCodes.indexOf(keyCode) === -1) {
             // If not allowed, prevent the default action (key press)
             event.preventDefault();
         }
     }

     function Allowalphabate(event) {
         var keyCode = event.which || event.keyCode;
         // Allowed key codes: a-z, A-Z, 1-9, ., , , :, -, (, ), \, /
         var allowedKeyCodes =
          //   [...Array(10).keys()].map(i => i + 48) // 0-9
             [...Array(26).keys()].map(i => i + 65) // A-Z
             .concat([...Array(26).keys()].map(i => i + 97)) // a-z
             .concat([32]); // ., ,, :, -, (, ), \, / space
         // Check if the pressed key is allowed
         if (allowedKeyCodes.indexOf(keyCode) === -1) {
             // If not allowed, prevent the default action (key press)
             event.preventDefault();
         }
     }

    function RemoveWhiteSpace(e) {
        debugger;
        //alert(e);
        e.value = $.trim(e.value);
    }
    function encryptData(data) {
        // Convert the integer data to a string
        var dataString = String(data);

        // Encrypt the data using CryptoJS
        var encryptedData = CryptoJS.AES.encrypt(JSON.stringify({ data: dataString }), 'secret_key').toString();

        return encryptedData;
    }
    function GetClient() {
        debugger
        $.ajax({
            type: 'Get',
            dataType: 'Json',
            contentType: 'application/json; charset=utf-8',
            data: {},
            url: "@Url.Action("Get_Client", "Master")",
            success: function (result) {
                var data1 = JSON.parse(result);
                if (data1.length > 0) {
                    $('#tbl.tbody').empty();
                    $.each(data1, function (i, data) {

                        var encryptedID = encryptData(data.ClientId);
                        var trows = "<tr id='tr_" + data.ClientId + "'>";
                        trows = trows + "<td><div class='form-check'><input class='form-check-input checkbox' type='checkbox' value='' id='flexCheckDefault_" + data.ClientId +"'></div></td>";
                        trows = trows + "<td style='display:none'>" + data.ClientId + "</td>";
                        trows = trows + "<td>" + (i + 1) + "</td>";
                       /* trows = trows + "<td>" + data.SchemeName + "</td>";*/
                        trows = trows + "<td>" + data.ClientName + "</td>";
                        trows = trows + "<td>" + data.clientDesc + "</td>";
                        trows = trows + "<td><button type='button' class='btn btn-outline-primary btn-sm' onclick='EditClient(" + data.ClientId + ")' title='Edit'><i class='bi bi-pencil'></i></button></td>";
                        trows = trows + "</tr>";
                        $('#tbl').append(trows);
                    });
                }
            },
            error: function (Message) {
                swal("", Message , "error");
            }
        });
    }



    function DeleteClient() {
        debugger
        if ($(".form-check-input:checked").length === 0) {
            Swal.fire({
                title: 'Please Select at least one checkbox.',
                text: '',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
        } else {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    var ids = '';

                        var checkLength = $(".form-check-input:checked").length;

                    var arrIds = [];
                        if (checkLength > 0)
                        {
                            $(".form-check-input:checked").each(function () {
                                let chkId = $(this).attr("id");

                                let rowNo = chkId.split('_')[1];
                                arrIds.push(rowNo)
                               let rowId = 'tr_' + rowNo;
                            });
                           ids= arrIds.toString()
                        }
                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        url: "@Url.Action("DeleteClient", "Master")",
                        data: { "Id": ids },
                        success: function (response) {
                         console.log("Response:", response);
                         Swal.fire(
            'Deleted!',
                             response.responseMessage,
                             response.responseText
        ).then((result) => {
                             if (result.isConfirmed) {
                                        location.href = "@Url.Action("ClientMaster", "Master")";
                                       }
                         });
                     } 
                    
                    });

                }
                return false;
            })
        }

    }
    function SaveClient() {
        if ($("#form").valid()) {
            debugger
            var ClientDetail = {


                /*schemeId: $('#SchemeName').val(),*/
                ClientName: $("#ClientName").val(),
                ClientId: $("#hdnClientId").val(),
                clientDesc: $("#clientDesc").val(),
            };
            var ClientId = $('#hdnClientId').val() || 0;
            let dynamicMsg;
            if (ClientId == 0) {
                dynamicMsg = "Save";
            } else {
                dynamicMsg = "Update";
            }
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, ' + dynamicMsg + ' it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("AddClient", "Master")",
                        beforeSend: function (xhr) {
                            xhr.setRequestHeader("XSRF-TOKEN",
                                $('input:hidden[name="__RequestVerificationToken"]').val());
                        },
                        data: ClientDetail,
                        content: 'application/json;charset=utf-8',
                        dataType: "json",
                        success: function (result) {
                            debugger
                            Swal.fire({
                                 icon: result.sucess ? 'success' : 'error',
                                title: result.responseText,
                                text: result.responseMessage,
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    location.href = "@Url.Action("ClientMaster", "Master")";
                                }
                            })
                        },
                        error: function (result) {
                            Swal.fire({
                                icon: 'error',
                                title: result.responseText,
                                text: result.responseMessage,
                            });
                        },
                    });
                }
            })
        }
    }




    function EditClient(id) {
        debugger;
        $.ajax({
            type: "POST",
            dataType: "json",
            url: '@Url.Action("GetClientByID", "Master")',
            data: { "Id": id },
            success: function (Result) {
                debugger
                console.log(Result)
                var data1 = JSON.parse(Result);
                $("#hdnClientId").val(data1.ClientId);
               // $('#SchemeName').val(data1.SchemeName);
                $('#ClientName').val(data1.ClientName);
                $('#clientDesc').val(data1.clientDesc);

                $("#ClientName").addClass("is-valid");
                $("#clientDesc").addClass("is-valid");
                $("#form").validate().resetForm(); 

                $('.LengthRemarks').trigger('blur');
                $("#addProposal").modal("show");
                $('#subaddData').text('Update');
                $('#DynamicButton').text('Cancel');
            },
            error: function (Message) {
                swal("",Message,"error");
                console.log(Result)
            }
        });
    }

    function AddClient() {
        reset();
        $("#hdnClientId").val('');
        $('#SchemeName').val('');
        $('#ClienttDesc').val('');
        $('.LengthRemarks').trigger('blur');
        //RemoveHeightLight();
        $("#addProposal").modal("show");
        $('#subaddData').text('Submit');
        $('#DynamicButton').text('Reset')
       
    }
    function reset() {
        if ($('#DynamicButton').text() == "Reset") {
            $('#ClientName').val('');
            $('#clientDesc').val('');
            $("#form").validate().resetForm();
            // Remove validation classes
            $("#form").find(".is-valid, .is-invalid").removeClass("is-valid is-invalid");
            $("#form").find(".error").removeClass("error");
            $("#form")[0].reset();
            $('.LengthRemarks').trigger('blur');
        }
        else {
            $("#addProposal").modal("hide");
            $("#form").validate().resetForm();
            // Remove validation classes
            $("#form").find(".is-valid, .is-invalid").removeClass("is-valid is-invalid");
            $("#form").find(".error").removeClass("error");
            $('#ClientName').val('');
            $('#clientDesc').val('');
        }
    }
   

    function RemoveHeightLight() {
        $('.LengthRemarks').trigger('blur');
        //$("#ClientName").removeClass("is-invalid");
        //$("#ClientName").removeClass("is-valid");
        //$("#clientDesc").removeClass("is-invalid");
        //$("#clientDesc").removeClass("is-valid");
        //$("#form").validate().resetForm();
       // $("#form").find(".error").remove();
        //$("#form").find(".is-invalid").removeClass("is-invalid");
    }

</script>
