<!-- Breadcrumb Section -->
@using System.Text.Json

<style>
    /* Table container with a fixed height for scrolling */
    #tableContainer {
        max-height: 300px; /* Adjust as needed */
        overflow-y: auto; /* Enables vertical scrolling */
        overflow-x: hidden; /* Prevents horizontal scrolling */
        border: 1px solid #ddd;
        border-radius: 5px;
    }

        /* Sticky table header for better UX */
        #tableContainer thead {
            position: sticky;
            top: 0;
            background: #fff;
            z-index: 10;
            box-shadow: 0 2px 2px rgba(0, 0, 0, 0.1);
        }

    /* Table styling for a cleaner look */
    #tbl {
        width: 100%;
        border-collapse: collapse;
    }

        #tbl th, #tbl td {
            padding: 10px;
            border-bottom: 1px solid #ddd;
            text-align: left;
        }

    /* Button alignment */
    #addMore, #saveData {
        margin-top: 10px;
    }

</style>
<div class="page-body">
    <div class="d-flex align-items-center justify-content-between mb-4 flex-wrap gap-3">
        <nav aria-label="breadcrumb">
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/BUIDCo_ePMS.Web/Processflow">Process Flow</a></li>
                <li class="breadcrumb-item active" aria-current="page">Add Process</li>
            </ul>
        </nav>
    </div>
</div>
@{
    int selectedMode = ViewBag.ExistingProcessData != null && ViewBag.ExistingProcessData.Count > 0
                       ? ViewBag.ExistingProcessData[0].SelectedMode
                       : 1; // Default to 1 (By User) during Add Process
}

<div class="container-fluid mt-4">
    <div class="card shadow-sm border-0">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <ul class="nav nav-tabs nav-fill w-100" role="tablist">
                <a asp-controller="Processflow" asp-action="AddProcess" class="nav-item nav-link active text-black" data-toggle="tooltip">Add</a>
                <a asp-controller="Processflow" asp-action="ViewProcess" class="nav-item nav-link text-black" data-toggle="tooltip">View</a>
            </ul>
        </div>
        <div class="card-body">
            <p class="text-danger fw-bold">(*) Indicates mandatory</p>
            <input type="hidden" id="INTPLINKID" value="@((ViewBag.ExistingProcessData != null && ViewBag.ExistingProcessData.Count > 0) ? ViewBag.ExistingProcessData[0].INTPLINKID : 0)" />
            <div class="row">
                <div class="col-md-4 mb-3">
                    <label for="globalPageDropdown" class="form-label fw-semibold text-dark">Select Page</label>
                    <select id="globalPageDropdown" class="form-select border-secondary shadow-sm">
                        <option value="0" disabled selected>-- Please Select Page --</option>
                        @foreach (var item in ViewBag.GetAllpage)
                        {
                            <option value="@item.INTPLINKID">@item.NVCHPLINKNAME</option>
                        }
                    </select>
                </div>
                <div class="col-md-4 mb-3 d-flex align-items-center">
                    <div class="form-check me-3">
                        <input class="form-check-input" type="radio" name="toggleTable" id="UserTable" value="1" @(selectedMode == 1 ? "checked" : "")>
                        <label class="form-check-label" for="UserTable">By User</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="toggleTable" id="DesignationTable" value="2" @(selectedMode == 2 ? "checked" : "")>
                        <label class="form-check-label" for="DesignationTable">By Designation</label>
                    </div>
                </div>
            </div>
            <div id="tableContainer" class="table-responsive border">
                <table id="tbl" class="table table-striped">
                    <thead>
                        <tr>
                            <th style="width: 5%">Level Sl#</th>
                            <th id="dynamicColumn" style="width: 60%">User Name</th>
                            <th style="width: 5%">Action</th>
                        </tr>
                    </thead>
                    <tbody id="tblbody">
                        <tr class="label-group">
                            <td><input type="text" class="form-control label-id" value="1" readonly /></td>
                            <td>
                                <select class="form-control user-dropdown">
                                    <option value="0">--Select User--</option>
                                    @foreach (var item in ViewBag.GetAllUser)
                                    {
                                        <option value="@item.INTUSERID">@item.VCHUSERNAME</option>
                                    }
                                </select>
                                <select class="form-control Designation-dropdown d-none">
                                    <option value="0">--Select Designation--</option>
                                    @foreach (var item in ViewBag.GetallDesignation)
                                    {
                                        <option value="@item.INTDESIGID">@item.NVCHDESIGNAME</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger remove-btn" disabled>Remove</button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Buttons Below Table -->
            <div class="mt-3">
                <button type="button" class="btn btn-primary" id="addMore">Add More</button>
                <button type="button" class="btn btn-success" id="saveData">
                    @(ViewBag.ExistingProcessData == null || (ViewBag.ExistingProcessData.Count == 0) ? "Save" : "Update")
                </button>
            </div>

        </div>
    </div>
</div>



<!-- JavaScript -->



    <script>
    document.addEventListener("DOMContentLoaded", function () {
        function updateColumnHeader() {
            let selectedRadio = document.querySelector('input[name="toggleTable"]:checked');
            let columnHeader = document.getElementById('dynamicColumn');

            if (selectedRadio && columnHeader) {
                columnHeader.innerText = (selectedRadio.value === "1") ? "User Name" : "Designation Name";
            }
        }

        // Set the correct column header on page load (edit mode)
        updateColumnHeader();

        // Listen for changes in radio button selection
        document.querySelectorAll('input[name="toggleTable"]').forEach(radio => {
            radio.addEventListener('change', updateColumnHeader);
        });
    });

        function toggleDropdowns() {
            let selectedType = $("input[name='toggleTable']:checked").val();
            if (selectedType == "1") {
                $(".user-dropdown").removeClass("d-none");
                $(".Designation-dropdown").addClass("d-none");
            } else {
                $(".user-dropdown").addClass("d-none");
                $(".Designation-dropdown").removeClass("d-none");
            }
        }
  

   

    $(document).ready(function () {

        // Call toggle function on radio button change
        $(document).on("change", "input[name='toggleTable']", function () {
            toggleDropdowns();
        });


        // Trigger change event on page load to set the initial state
        $("input[name='toggleTable']:checked").trigger("change");

       
        let rowCount = 1; // Keeps track of the current row count

        // Get existing process data
        var existingData = @Html.Raw(JsonSerializer.Serialize(ViewBag.ExistingProcessData));
        if (existingData.length > 0) {
            var selectedMode = existingData[0].SelectedMode; // Access first item's SelectedMode

            if (selectedMode !== 0) {
                $("input[name='toggleTable'][value='" + selectedMode + "']").prop("checked", true);
                $("input[name='toggleTable']").prop("disabled", true);
            }
        }
        var userData = @Html.Raw(JsonSerializer.Serialize(ViewBag.GetAllUser));
        var designationData = @Html.Raw(JsonSerializer.Serialize(ViewBag.GetallDesignation));

        function getSelectedUsers() {
            let selectedUsers = [];
            $(".user-dropdown").each(function () {
                let selectedVal = $(this).val();
                if (selectedVal > 0) {
                    selectedUsers.push(selectedVal);
                }
            });
            return selectedUsers;
        }
        function getSelectedDesignations() {
            let selectedDesignations = [];
            $(".Designation-dropdown").each(function () {

                let selectedVal = $(this).val();
                if (selectedVal > 0) {
                    selectedDesignations.push(selectedVal);
                }
            });
            return selectedDesignations;
        }
       


        function updateDropdowns() {
            let selectedUsers = getSelectedUsers();
            let selectedDesignations = getSelectedDesignations();

            $(".user-dropdown").each(function () {
                let currentValue = $(this).val();
                $(this).empty().append('<option value="0">--Select User--</option>');

                userData.forEach(item => {
                    if (!selectedUsers.includes(item.INTUSERID.toString()) || item.INTUSERID.toString() === currentValue) {
                        let selected = item.INTUSERID.toString() === currentValue ? "selected" : "";
                        $(this).append(`<option value="${item.INTUSERID}" ${selected}>${item.VCHUSERNAME}</option>`);
                    }
                });
            });

            $(".Designation-dropdown").each(function () {
                let currentValue = $(this).val();
                $(this).empty().append('<option value="0">--Select Designation--</option>');

                designationData.forEach(item => {
                    if (!selectedDesignations.includes(item.INTDESIGID.toString()) || item.INTDESIGID.toString() === currentValue) {
                        let selected = item.INTDESIGID.toString() === currentValue ? "selected" : "";
                        $(this).append(`<option value="${item.INTDESIGID}" ${selected}>${item.NVCHDESIGNAME}</option>`);
                    }
                });
            });
        }
        $(document).on("change", ".user-dropdown", function () {
            updateDropdowns();
        });

        $(document).on("change", ".Designation-dropdown", function () {
            updateDropdowns();
        });

        function addRow(level, userId = 0, designationId = 0) {
            rowCount++;
            // Get the selected option (User Based or Designation Based)
            let selectedType = $("input[name='toggleTable']:checked").val();
            let newRow = $(`
        <tr class="label-group">
            <td><input type="text" class="form-control label-id" value="${level}" readonly /></td>
            <td>
               <select class="form-control user-dropdown ${selectedType == "1" ? "" : "d-none"}">
                    <option value="0">--Select User--</option>
                </select>
                <select class="form-control Designation-dropdown ${selectedType == "2" ? "" : "d-none"}">
                    <option value="0">--Select Designation--</option>
                </select>
            </td>
            <td>
                <button type="button" class="btn btn-danger remove-btn">Remove</button>
            </td>
        </tr>
    `);

            $("#tblbody").append(newRow);
            updateDropdowns();

            if (userId > 0) {
                newRow.find(".user-dropdown").val(userId);
            }
            if (designationId > 0) {
                newRow.find(".Designation-dropdown").val(designationId);
            }
            // Apply toggle visibility
            toggleDropdowns();
        }

      
       

        


        // Populate existing data when editing
        if (existingData.length > 0) {
            $("#tblbody").empty(); // Clear default row
            existingData.forEach((item, index) => {
                addRow(index + 1, item.INTUSERID, item.INTDESIGID);
            });
            updateDropdowns();
            
        } else if ($("#tblbody tr").length === 0) {
            addRow(1, 0); // Add at least one empty row if no existing data
        }

        // Add More Button Click Event
        $("#addMore").click(function () {
            addRow(rowCount + 1, 0);
        });

        // Save Data Button Click Event
        $("#saveData").click(function () {
            debugger;
            let processes = [];
            let selectedPageId = $("#globalPageDropdown").val(); // Get selected page

            if (selectedPageId == "0") {
                alert("Please select a page before saving.");
                return;
            }
            let selectedMode = $("input[name='toggleTable']:checked").val(); // 1 = User, 2 = Role

            $("#tblbody tr").each(function () {
                let slNo = $(this).find(".label-id").val();
                let userId = $(this).find(".user-dropdown").val();
                let DesignationId = $(this).find(".Designation-dropdown").val();
                let dataItem = { LevelNO: parseInt(slNo), INTPLINKID: parseInt(selectedPageId) };

                if (selectedMode == "1" && userId > 0) {
                    dataItem["INTUSERID"] = parseInt(userId);
                } else if (selectedMode == "2" && DesignationId > 0) {
                    dataItem["INTDESIGID"] = parseInt(DesignationId);
                } else {
                    alert("Please select a valid User or DesignationId before saving.");
                    return false; // Stop execution
                }

                processes.push(dataItem);
                //if (userId > 0) {
                //    processes.push({
                //        LevelNO: parseInt(slNo),
                //        INTPLINKID: parseInt(selectedPageId), // Use selected page for all rows
                //        INTUSERID: parseInt(userId)
                //    });
                //}
            });

            if (processes.length === 0) {
                alert("Please add at least one valid row before saving.");
                return;
            }
            let requestData = {
                selectedMode: selectedMode, // ✅ Include the radio button value
                processes: processes
            };

            console.log("Sending data:", JSON.stringify(processes)); // Debugging log

            $.ajax({
                url: "@Url.Action("SaveProcessAjax", "Processflow")",
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(requestData),
                success: function (response) {
                    alert("Data saved successfully!");
                    //location.reload();
                    window.location.href = "/BUIDCo_ePMS.Web/Processflow/AddProcess";

                },
                error: function (xhr, status, error) {
                    console.log(xhr.responseText);
                    alert("Error saving data. Please try again.");
                }
            });
        });

        // Remove row functionality
        $(document).on("click", ".remove-btn", function () {
            $(this).closest("tr").remove();
            updateLabelIds();
            updateUserDropdowns();
        });

        // Function to update row numbers after deletion
        function updateLabelIds() {
            rowCount = 0;
            $(".label-group").each(function () {
                rowCount++;
                $(this).find(".label-id").val(rowCount);
            });
        }
    });

    let selectedPageId = $("#INTPLINKID").val(); // Get hidden input value
    if (selectedPageId > 0) {
        $("#globalPageDropdown").val(selectedPageId).prop("disabled", true); // Set value and make readonly
    }
    </script>


<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
